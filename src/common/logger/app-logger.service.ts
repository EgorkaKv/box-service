import { Injectable, LoggerService, Inject } from '@nestjs/common';
import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import { Logger } from 'winston';


@Injectable()
export class AppLogger implements LoggerService {
  constructor(
    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger
  ) {}

  log(message: string, context?: string, metadata?: Record<string, any>) {
    this.logger.info(message, {
      context: context || 'Application',
      ...metadata
    });
  }

  error(message: string, trace?: string, context?: string, metadata?: Record<string, any>) {
    this.logger.error(message, {
      context: context || 'Application',
      stack: trace,
      ...metadata,
    });
  }

  warn(message: string, context?: string, metadata?: Record<string, any>) {
    this.logger.warn(message, {
      context: context || 'Application',
      ...metadata
    });
  }

  debug(message: string, context?: string, metadata?: Record<string, any>) {
    this.logger.debug(message, {
      context: context || 'Application',
      ...metadata
    });
  }

  verbose(message: string, context?: string, metadata?: Record<string, any>) {
    this.logger.verbose(message, {
      context: context || 'Application',
      ...metadata
    });
  }

  // –ù–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–º–µ–Ω–∞
  logRequest(method: string, url: string, statusCode: number, responseTime: number, context?: string, metadata?: Record<string, any>) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    const requestType = this.categorizeRequest(method, url, statusCode);
    const statusIcon = this.getStatusIcon(statusCode);
    const responseTimeFormatted = this.formatResponseTime(responseTime);

    // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    const message = `${method} ${url} ‚Üí ${statusCode} ${statusIcon} ${responseTimeFormatted}`;

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞
    const enrichedMetadata = {
      context: context || 'HTTP',
      method,
      url,
      statusCode,
      responseTime: `${responseTime}ms`,
      requestType,
      isError: statusCode >= 400,
      isSlowRequest: responseTime > 500,
      ...metadata,
    };

    // –õ–æ–≥–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    if (statusCode >= 500) {
      this.logger.error(message, enrichedMetadata);
    } else if (statusCode >= 400) {
      this.logger.warn(message, enrichedMetadata);
    } else {
      this.logger.info(message, enrichedMetadata);
    }
  }

  private categorizeRequest(method: string, url: string, statusCode: number): string {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (url.includes('/auth/')) return 'authentication';
    if (url.includes('/boxes/')) return 'boxes';
    if (url.includes('/health')) return 'monitoring';
    if (url.includes('/metrics')) return 'monitoring';
    if (url.includes('/static/') || url.includes('.css') || url.includes('.js')) return 'static';
    if (method === 'OPTIONS') return 'cors';
    return 'api';
  }

  private getStatusIcon(statusCode: number): string {
    if (statusCode >= 200 && statusCode < 300) return '‚úÖ';
    if (statusCode >= 300 && statusCode < 400) return '‚û°Ô∏è';
    if (statusCode >= 400 && statusCode < 500) return '‚ö†Ô∏è';
    if (statusCode >= 500) return '‚ùå';
    return '‚ùì';
  }

  private formatResponseTime(ms: number): string {
    if (ms < 100) return `(${ms}ms)`;
    if (ms < 500) return `(${ms}ms üü°)`;
    if (ms < 1000) return `(${ms}ms üü†)`;
    return `(${ms}ms üî¥)`;
  }

  logAuth(action: string, userId?: string | number, storeId?: string | number, context?: string, metadata?: Record<string, any>) {
    this.logger.info(`Auth: ${action}`, {
      context: context || 'Auth',
      userId: userId?.toString(),
      storeId: storeId?.toString(),
      ...metadata,
    });
  }

  logDatabase(operation: string, entity: string, duration?: number, context?: string, metadata?: Record<string, any>) {
    this.logger.debug(`DB: ${operation}`, {
      context: context || 'Database',
      entity,
      duration: duration ? `${duration}ms` : undefined,
      ...metadata,
    });
  }

  logError(error: Error, context?: string, metadata?: Record<string, any>) {
    this.logger.error(error.message, {
      context: context || 'Application',
      stack: error.stack,
      name: error.name,
      ...metadata,
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Winston (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  getWinstonLogger(): Logger {
    return this.logger;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  logBatch(entries: Array<{level: string, message: string, context?: string, metadata?: Record<string, any>}>) {
    entries.forEach(entry => {
      this.logger.log(entry.level, entry.message, {
        context: entry.context || 'Application',
        ...entry.metadata
      });
    });
  }
}
